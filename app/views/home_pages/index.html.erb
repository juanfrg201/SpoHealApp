<div class="container">
  <div class="hero-body">
    <div class="container">
      <!-- Card con tabla -->
      <div class="card">
        <header class="card-header">
          <p class="card-header-title">
            Días Activos
          </p>
        </header>
        <div class="card-content">
          <div class="content mt-0">
            <!-- Tabla con estilos responsivos -->
            <%= render 'table_info' %>
          </div>
        </div>
      </div>

      <!-- Agregamos una separación entre las tarjetas -->
      <div class="mt-4"></div>

      <!-- Card con recomendaciones -->
      <div class="content has-text-centered">
        <p class=" has-text-success">Recomendaciones</p>
      </div>
      <div class="card has-shadow-8">
        <div class="card-content">
          <div class="columns">
            <div class="column">
              <div class="content">
                
              </div>
            </div>
            <div class="column">
              <div class="content">
                <p>Contenido de la segunda columna...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let vapidPublicKey = new Uint8Array(<%= Base64.urlsafe_decode64("BJG7SDVTBamvuvqQkrtYBhjuf8gY8Ckki64fT86GGd3JD_Sxmv3v2lebdwen7sOw7uBHswXnkfeCuO3_ekA7D80=").bytes %>)
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/service-worker.js')
      .then(function(registration) {
        return registration.pushManager.getSubscription()
          .then(async function(subscription) {
            if (subscription) {
              await sendSubscriptionToServer(subscription);
              return subscription;
            }

            // Suscríbete al servicio de notificaciones
            const newSubscription = await registration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey: vapidPublicKey
            });

            // Envía la nueva suscripción al servidor
            await sendSubscriptionToServer(newSubscription);

            return newSubscription;
          });
      })
      .catch(function(error) {
        console.error('Error al registrar el Service Worker:', error);
      });
  }

  async function sendSubscriptionToServer(subscription) {
    try {
      const response = await fetch('/notifications', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(subscription),
      });

      if (!response.ok) {
        throw new Error('Error en la solicitud al servidor');
      }

      const data = await response.json();
      console.log(data);
    } catch (error) {
      console.error('Error en la solicitud al servidor:', error);
    }
  }

</script>
